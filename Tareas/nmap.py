#!/usr/bin/python
# -*- coding: utf-8 -*-

# ejecución: sudo python nmap.py -i <ip_host> -p <Puertos separados por coma, por espacio o por guión (para un rango)>
from sys import argv,exit as eexit,stderr
from scapy.all import sr1,sr,IP,ICMP,TCP,RandShort
import optparse
import argparse
def printError(msg, exit = False):
        """
        Función para imprimir error de argumentos.
        Recibe: msg (String) , exit (Bool)
        Devuelve: mensaje de error y termina ejecución de script
        """
        stderr.write('Error:\t%s\n' % msg)
        if exit:
            eexit(1)

def checkOptions(options):
    """
    Función para verificar que los argumentos no estén vacíos.
    Recibe: options (de argparse)
    Devuelve: mensaje de error y llama a la función printError
    """
    if options.host is None:
        printError('Debes especificar la IP del host.', True)

def addOptions():
    """
    Función para agregar las opciones al script: -p <lista de puertos, separados por coma o por espacios, o por un guión para indicar un rango>
                                                 -i <dirIPHostAescanear>
    Devuelve: valores asignados a puertos y host
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('-p','--port', dest='puertos', default=['80'], nargs='+', help='Puertos para realizar escaneo.')
    parser.add_argument('-i','--host', dest='host', default=None, help='IP de host a escanear.')

    opts = parser.parse_args()
    return opts

def informe(ip, abiertos, cerrados, filtrados):
        """
        Función para imprimir el resultado del escaneo de los puertos.
        Recibe: ip (String), abiertos (lista de puertos abiertos), cerrados (lista de puertos cerrados), filtrados (lista de puertos filtrados)
        Devuelve: muestra en salida estándar el resultado del escaneo
        """
        print 'Host: %s\n' % ip
        for port in abiertos: print 'Puerto %i: abierto' % port
        for port in cerrados: print 'Puerto %i: cerrado' % port
        for port in filtrados: print 'Puerto %i: filtrado' % port

def escaneo(host,puertos):
        """
        Función que realiza el escaneo en el host de los puertos recibidos.
        Recibe: host (String), puertos (lista separada por comas o por espacios)
        Devuelve: abiertos (lista de puertos abiertos), cerrados (lista de puertos cerrados), filtrados (lista de puertos filtrados),
        """
        abiertos, cerrados, filtrados = [], [], []
        puerto_origen = RandShort()
        for puerto in puertos:
                respuesta = sr1(IP(dst=host)/TCP(sport=puerto_origen,dport=puerto,flags="S"),timeout=2,verbose=0)  # SYN
                if respuesta is not None:
                        if respuesta.getlayer(TCP).flags == 0x12:  # SYN/ACK
                                reset = sr(IP(dst=host)/TCP(sport=puerto_origen,dport=puerto,flags="R"),timeout=2,verbose=0)  # RST
                                abiertos.append(puerto)
                        elif respuesta.getlayer(TCP).flags == 0x14:  # RST/ACK
                                cerrados.append(puerto)
                        elif(int(respuesta.getlayer(ICMP).type)==3 and int(respuesta.getlayer(ICMP).code) in [1,2,3,9,10,13]):  # Filtrado
                                filtrados.append(filtrados)
                else:
                        filtrados.append(puerto)
        return abiertos, cerrados, filtrados

def puertosFormato(puertos):
        """
        Función para parsear la lista de puertos leída, ya sea separada por comas, por espacios o con un guión (para un rango de puertos)
        Recibe: puertos (argumento leído con -p)
        Devuelve: lista de enteros con los puertos
        """
        if '-' in puertos[0]:
                print int(puertos[0].split('-')[0])
                return [int(i) for i in range(int(puertos[0].split('-')[0]),int(puertos[0].split('-')[1])+1)]
        elif ',' in puertos[0]:
                return [int(i) for i in puertos[0].split(',')]
        else:
                return [int(i) for i in puertos]

# main
opts = addOptions()
checkOptions(opts)
puertos = puertosFormato(opts.puertos)
abiertos,cerrados,filtrados = escaneo(opts.host,puertos)
informe(opts.host,abiertos,cerrados,filtrados)
